План:
1) введение, формулировка задачи
2) введение в язык Лисп, лексика, синтаксис, семантика
3) реализация интерпретатора
3) введение в VList
4) реализация VList
5) ?тесты
6) заключение, результаты
7) список литературы

1) уже есть
2) 
    Лисп (LISP, от англ. LISt Processing language — «язык обработки списков»; современное написание: Lisp) — семейство языков программирования, программы и данные в которых представляются системами линейных списков символов. Лисп является вторым в истории (после Фортрана) используемым по сей день высокоуровневым языком программирования. Создатель Лиспа Джон Маккарти занимался исследованиями в области искусственного интеллекта (в дальнейшем ИИ) и созданный им язык по сию пору является одним из основных средств моделирования различных аспектов ИИ.
    Традиционный Лисп имеет динамическую систему типов. Язык является функциональным, но многие поздние версии обладают также чертами императивности, к тому же, имея полноценные средства символьной обработки становится возможным реализовать объектно-ориентированность, примером такой реализации является платформа CLOS. 
    Язык Лисп, наряду с языком Ada, прошел процесс фундаментальной стандартизации для использования в военном деле и промышленности, в результате чего появился стандарт Common Lisp. Его реализации существуют для большинства платформ.
    Одной из базовых идей языка Lisp является представление каждого символа как узла многокоординатной символьной сети; при этом координаты, свойства, уровни сети записаны в так называемых слотах символа. Основные слоты: имя символа (основополагающее Аристотелево А=А из которого вырастает лямбда-исчисление),
функциональный слот, слот-значение, расширяемый список свойств (можно свободно расширить слотовую систему удобным для решения задачи способом).
    Автор языка Лисп – профессор математики и философии Джон Мак-Карти, выдающийся ученый в области искусственного интеллекта. Он предложил проект языка Лисп, идеи которого возбудили не утихающие до наших дней
дискуссии о сущности программирования. Сформулированная Джоном Мак-Каpти (1958) концепция символьной обработки информации восходит к идеям Чёрча (лямбда-исчисление) и других видных математиков конца 20-ых годов
предыдущего века. Джон Мак-Карти предложил функции рассматривать как общее понятие, к которому могут быть сведены все другие понятия программирования.
    1. Основы символьной обработки.
Идеальный (чистый, элементарный) Лисп – это свод принципиальных особенностей программирования в функциональном стиле. Начинается он с выбора подходящей структуры данных и минимального набора функций над
выбранной структурой. Информационная обработка в языке Лисп отличается от большинства подходов к программированию тремя важными принципами: 
    1) Природа данных - все данные представляются в форме символьных выражений(S-выражения)(определение данного понятия будет введено позже).
    2) Самоописание обработки символьных выражений - описание способов обработки S-выражений представляется программами, рассматриваемыми как символьные выражения. Программы строятся из рекурсивных функций над S-
выражениями. Определения и вызовы этих функций, как и любая информация, имеют вид S-выражений, то есть формально они могут обрабатываться как обычные данные, получаться в процессе вычислений и преобразовываться как значения.
    3) Подобие машинным языкам - система программирования на Лиспе допускает, что программа может
интерпретировать и/или компилировать программы, представленные в виде S-выражений. Это сближает программирование на Лиспе с методами низкоуровневого программирования и отличает от традиционной методики
применения языков высокого уровня.
    
    Далее под языком Лисп будет пониматься некоторое его подмножество из базовых функций. Стоит также отметить, что не было стремления в точности реализовать интерпретацию языка Лисп - часть его элементов было опущено за не важностью чтобы не нагромождать и без того непростую логику программы, либо намеренно изменено. За основу взят диалект Лиспа - Common Lisp.

    Традиционно в LISP рассматривают два типа атомов:
        а)числовые и текстовые константы:
        б)символы

    Это числовые и текстовые константы:
        1, 1231, "this is a constant string", "а можно и кириллицей"
    Символ - некоторая структура данных с набором свойств. Часть из них является выделенными - имя, значение, функция. Символы являются полными аналогами переменных в других языках - по его имени можно получить доступ к его остальным свойствам(по умолчанию - к значению). Значения же свойств могут быть любой природы.
    В общем смысле, абстрагируясь от внутренней реализации структур для хранения символов и констант, числовые и текстовые константы являются неизменяемыми(либо изменяемыми, но в несколько ином смысле) символами, с двумя свойствам - имя и значение, которые совпадают.
    В лиспе существует два выделенных атома - константные символы t, несущий смысл true(истина), и nil, обозначающий false(ложь) или null(пустое значение). Некоторые базовые функции также являются в этом смысле символами-константами, где вместо свойства-значения присутствует свойство-функция.
    В литературе по языку часто встречается некоторая путаница между символами и их именами. Из-за того, что в самом языке и данные, и текст программы представляется в виде символьных выражений, внешне мы имеем дело только с символьными именами, которые в зависимости от контекста могут иметь смысл имени переменной или просто символьной строки(не путать с текстовыми константами!). Доступ к свойствам любого символа также возможен(за редким исключением) только по его символьному имени. Поэтому иногда производится отождествление символьного имени с обозначаемым им символом.
    Пример - это символьные имена:
            а, x, оченьstrangeимя, with2345and+*%?etc, t, nil

    Ограничения на них зависят от используемого диалекта, но в большинстве случаев не накладывается практически никаких ограничений на длину имени и используемые в нем символы. Кроме того, опять же в большинстве диалектов, имена символов не зависят от регистра.   

    Второй основной тип данных – точечные пары, которые синтаксически выражаются следующим образом:
        <точечная пара> ::= ( <атом> | <точечная пара> . <атом> | <точечная пара> )

    Например, точечными парами являются выражения:
        (a . b), (a . (b . c)), ((a . b) . (c . nil))
    
    Атомы и точечные пары объединяют под общим названием S-выражения (S-expression, symbolic expression). Особым видом S-выражения является список, выражаемый следующим образом:
        <список> ::= nil | ( ) | ( <S-выражение> . <список> )
        <S-выражение> ::= <атом> | <точечная пара>

    Атом nil определяется равным пустому списку (). В таком случае определение списка можно переписать следующим образом:
        <список> ::= <пустой список> | ( <голова> . <хвост> )
        <пустой список> :: = nil
        <голова> ::= <S-выражение>
        <хвост> ::= <список>

    И голова, и хвост являются ключевыми понятиями в списочном контексте Лисп. Первый элемент списка именуется головой списка, все остальные элементы – хвостом. Для работы с головой и хвостом существует набор базовых функций, рассмотренный немного ниже. 
    Атом nil, рассматриваемый как представление пустого списка (), выполняет роль ограничителя в списках. Одноэлементный список (A) идентичен S-выражению (A . nil). Список (A1 A2 … Ak) может быть представлен как S-выражение вида:
        (A1 . (A2 . ( … . (Ak . nil) … )))

    Такая единая структура данных оказалась вполне достаточной для представления сколь угодно сложных программ. Дальнейшее определение языка Лиспа можно рассматривать как восходящий процесс генерации семантического каркаса. Синтаксис программ в Лиспе внешне на отличается от синтаксиса данных. Просто выделяются вычислимые выражения, называемые формами, т.е. данные, приспособленные к вычислению. Внешне это выглядит как объявление объектов, заранее известных в языке, и представление разных форм, вычисление которых обладает определенной спецификой. Выполнение программы на Лиспе устроено как интерпретация данных, представляющих выражения, имеющие значение. Ниже приведены синтаксические правила:
        <форма> := <константа> | <символьное имя> | <выражение>
        <выражение> ::= (<функция> <аргумент>*)
        <функция> ::= <форма>
        <аргумент> ::= <форма>
        <константа> ::= <число> | <константная строка> | <константный символ> | <базовая функция> | <объявленная функция> | <замыкание> | <другие типы данных>*

    
    Форма - символьное выражение, которое может быть вычислено и значение зависит от контекста. Для вычисления форм вводится базовая функция eval, подробно о которой описано ниже.


    Базовые функции

    Для работы с символьными парами существует 3 базовых функции:
        а) car – функция, обеспечивающая доступ к объектам, расположенным слева от точки в точечной нотации, т.е. в левой части символьной пары.
        б) cdr - функция, обеспечивающая доступ к объектам, расположенным справа от точки в точечной нотации, т.е. в правой части символьной пары.
        а) cons - функция, которая строит символьную пару и заполняет его объектами, являющихся значениями пары ее аргументов. Первый аргумент размещается в левой части, а второй - в правой.

    Помимо них существует еще 2 базовых функции-предиката(возвращают атом t, если истина, и атом nil, если ложь):
        а) atom - функция, которая проверяет, является ли объект, переданный в качестве аргумента, атомом
        б) eq - функция, проверяющая равенство двух атомов
        
    С этими функциями связаны следующие тождества:
        (car (cons x y)) = x
        (cdr (cons x y)) = y
        (atom (cons x y)) = nil
        (cons (car x) cdr(x)) = x для неатомарных x
        (eq x x) = t, если x атом       
        (eq x y) = nil, если x и y различимы

    Помимо этих пяти функций, базовыми являются функции quote, cond, defun, lambda, eval. Однако по сути выполнение этих функций возложено на плечи интерпретатора, роль которого исполняет функция eval. При описании ее и будет объяснено значение оставшихся базовых функций.
    
    Функция eval. Интерпретатор.

    Интерпретатор или универсальная функция - это функция, которая умеет вычислять значение любой формы, включая формы, сводимые к вычислению произвольной заданной функции, применяемой к представленным в этой же форме аргументам, по доступному описанию данной функции. (Конечно, если функция, которой предстоит интерпретироваться, имеет бесконечную рекурсию, то интерпретация будет повторяться бесконечно.)
    Базовая функция eval - универсальная функция в языке Лисп, определенная от аргумента expr - выражения,
являющегося произвольной вычислимой формой. Универсальная функция должна предусматривать основные виды вычисляемых форм, задающих значения аргументов, а также представления функций, в соответствии со сводом вышеприведенных правил языка. При интерпретации выражений учитывается следующее:
    - Значение константы - она сама
    - Значение символьного имени - некоторое свойство символа, чье имя оно представляет. По умолчанию это свойство-значение, но, например, для <функция> - это будет свойство-функция. Символ по символьному имени определяется в зависимости от текущего контекста
    - Остальные формы выражений рассматриваются по общей схеме как список из функции и ее аргументов. Сначала аргументы вычисляются(в порядке их следования) и затем вычисленные значения передаются функции для интерпретации ее определения. Так обеспечивается возможность писать композиции функций. Например, в выражении (first (car x)) внутренняя функция car сначала получит в качестве своего аргумента значение переменной x, а потом свой результат передаст как аргумент более внешней функции first. Исключением являются специальные формы 
    - Особого внимания требуют специальные формы, которые отличаются от других функций тем, что ее аргументы не вычисляются до вызова и их может быть неограниченное количество.
    - При вызове функции quote, его аргумент не вычисляется(quote - специальная форма). Поэтому quote по сути является функцией блокировки вычислений. Сама по себе она возвращает свой аргумент, т.е.:
        (quote x) = x, без вычисления значения x
    - Функция cond являет собой условное выражение. Кол-во аргументов любое и они не вычисляются перед выполнением(cond - специальная форма). Аргументами функции должны быть двухэлементные списки. Сначала вычисляется значение выражения головы аргумента-списка. Если оно отлично от nil, то cond вычисляет значение второго элемента аргумента-списка и возвращает результат, иначе повторяет тот же алгоритм для следующего аргумента, пока не кончатся аргументы - в таком случае cond вернет атом nil.
        (cond (p1 e1) (p2 e2)...(pk ek) )
                |______|_________|__________ предикаты для выбора ветви
                   |______|_________|_______ ветви условного выражения 

    Функция cond необычна по нескольким причинам:
        а) она является функцией с неограниченным числом параметров
        б) с помощью нее реализуется вся логика условий и циклы
        в) за счет того, что аргументы вычисляются во время вызова, последовательно один за другим и в случае, если будет получен результат, удовлетворяющий выходу из функции, оставшиеся аргументы вычисляться не будут(более того - даже не будут проверяться на правильность), можно говорить о некоторой ленивости вычисления. Т.е. эта функция является базой для построения функций с ленивым вычислением.
    - Если функция представлена своим названием(символьным именем), то среди названий различаются
имена встроенных функций, такие как car, cdr, cons и т.п., и имена функций, введенных в программе. Для встроенных(базовых) функций интерпретация сама знает как найти их значение по заданным аргументам, а для
введенных в программе функций - использует их определение, которое находит по имени(в этом случае берется свойство-функция символа) или по контексту.
    - Функция set принимает два аргумента x y и назначает символу с именем x свойство-значение, равное y. Таким образом x обязан быть символьным именем.
    - Функция lambda является лямбда-конструктором и имеет синтаксис вида: 
        (lambda param_list body)
    Аргументы перед вызовом не вычисляются. Функция возвращает некоторый безымянный объект(безымянный символ, имеющий свойство-функция), являющийся функцией со списком параметров param_list и телом body. Т.к. возвращается безымянный объект - она может только сразу непосредственно примениться, т.е. требует синтаксис вида:
        ((lambda (var1 ... varN) body) arg1 ... argN)
    Прежде, чем ее применять, понадобится связывать переменные из лямбда-списка со значениями аргументов. Случай, когда в теле лямбда-функции имеются свободные переменные, будет разобран ниже при обсуждении контекстов исполнения.
    - Функция defun служит для объявления новых именованных функций и имеет синтаксис вида: 
        (defun name param_list body)
    Аргументы defun также не вычисляются перед вызовом. Сама функция связывает безымянный символ-переменную, равный результату интерпретации (lambda param_list body), с именем name и возвращает name. 
    Таким образом defun является псевдо-функцией, т.е. функцией, которая выполняется ради ее воздействия на систему, тогда как обычная функция - ради ее значения. Defun заставляет функции стать определенными и допустимыми в системе равноправно со встроенными функциями. Можно сказать более точно, что полная область значения псевдо-функции defun включает в себя некоторые доступные ей части системы, обеспечивающие хранение информации о функциональных объектах, а формальное ее значение – атом, символизирующий определение функции.

    Таким образом, интерпретация функций осуществляется как взаимодействие
четырех подсистем:
    - обработка структур данных (cons, car, cdr, atom, eq),
    - конструирование функциональных объектов (lambda, defun),
    - идентификация объектов (определение символа и его свойств по символьному имени в зависимости от контекста),
    - управление порядком вычислений (композиции, quote, cond, eval).

    Особого рассмотрения заслуживает система контекстов. Стоит отметить, что разные диалекты и реализации языка могут иметь разную логику построения контекста и поиска в нем. Ниже приведена логика в соответствии с GNU Common Lisp.     Контекст можно представить в связного списка, элементами которого являются либо другой связный список, либо ассоциативный список(получается структура вроде ориентированного графа, вершинами которого являются ассоциативные списки). Каждый ассоциативный список обозначает определенный слой контекста, в котором хранятся пары { символьное имя; символ }. 
    Пусть в некоторый момент вычислений имеется контекст A. Разберем несколько вариантов: 
        - При вычислении значения символьного имени x, т.е. символа с именем x, происходит поиск в глубину. Поиск ведется сначала в голове списка, затем в хвосте, пока не найдется нужная пара. Символ из этой пары и является значением символьного имени x. Если переменная не найдена, то выдается ошибка с сообщением, что символьное имя не привязано к символу.
        - При задании переменной нового значения функцией set, если символ найден в глобальном контексте(им является последний элемент при обходе графа - ассоциативный список слоя самого верхнего уровня, т.е. глобального уровня), то его значение меняется на новое, иначе объявляется новая переменная в глобальном контексте.
        - При вычислении функции lambda и defun, когда конструируется новый объект-функция, контекст вычислений сохраняется вместе с ним.
        - При вызове функции, создается новый слой контекста B(ассоциативный список), в который добавляются пары { параметр функции : аргумент вызова }. В случае, если функция, которую необходимо вычислить не является базовой, а является введеной программистом, т.е. полученной ранее как результат вызова lambda или defun, следовательно она несет с собой некоторый контекст C. Эта функция будет далее вычисляться в контексте вида (cons B (cons C A).

    Таким образом по умолчанию переменные в Lisp являются лексическими. На этом основано использование замыканий - по сути объекты, полученные при вычислении defun и lambda, являются замыканиями в чистом виде. Можно объявлять динамические переменные, но в данной работе они не будут рассматриваться. Defun всегда определяет функции глобально.

    Программа состоит из последовательности вычисляемых форм. Если форма список, то ее первый элемент интерпретируется как функция. Остальные элементы списка – аргументы для этой функции. Они вычисляются с помощью eval и полученное значение выводится как результат программы. Набор основных функций обеспечен системой. Другие функции могут быть введены программистом. Любая функция может использоваться в определении другой функции с учетом иерархии построений.

    Реализация    

    Грамматика языка выглядит таким образом:      
        <Digit> := '0' | '1' | ... | '9'
        <Number> := <Digit>+
        <Space> := ' ' | '\n' | '\t'
        <SpecChar> := ''' | '(' | ')'
        <Commentary> := ';' UnicodeChar* ('\n' | <eof>)
        <ConstString> := '"' UnicodeChar* '"'
        <SymbolChar> := UnicodeChar / {<Space>, <SpecChar>, ';', '"'}
        <SymbolName> := (<SymbolChar> / <Digit>) SymbolChar*
    
    В Лиспе в большинстве случаев имеется возможность работать с числами любой длины, поэтому числом считается - ненулевая послед-ть цифр любой длины. Последовательность любых символов unicode, обрамленная двойными кавычками считается константной строкой. Для работы с ними в лиспе существуют специальные функции по аналогии с другими языками. Часть строки, начиная с символа ';' считается комментарием и интерпретатором не исполняется. Лексема SpecChar содержит символ апострофа ''' - это сокращение для функции quote(т.е. 'a аналогична (quote a)). Символьные имена должны начинаться с букв, чтобы легко отличаться от чисел. Любая последовательность символов unicode ненулевой длины, начинающаяся не с цифры и не содержащая специальных символов и символов '"', ';', считается символьным именем. Символами пунктуации являются пробельные символы(лексема Space), а также круглые скобки. Нет особого формата для записи программ. Границы строк игнорируются. Любое число пробелов и концов строк можно разместить в любой точке программы, но не внутри атома.

    Лексический анализ происходит следующим образом. Лексер получает входной поток данных, декодирует их в последовательность символов и выделяет последовательно из них лексемы. На выходе получается обычный список лексем, где лексема представляется в виде нек-ой структуры, содержащей строку-значение лексемы и информацию о ее позиции в коде программы. 
    Лексер реализован в виде отдельного пакета clispi/lexer, который содержит структуры Lexer, Lexem и LexerError. Класс Lexer предоставляет методы, для выделения следующей лексемы(метод NextLexem() *Lexem) из входного потока. Лексемы выдаются в виде объектов структуры Lexem. Возникающие ошибки являются объектами структуры LexerError, реализующей стандартный интерфейс ошибок.

    Последовательность лексем далее передается на вход парсеру, задача которого - построить правильное синтаксическое дерево и вернуть полученное выражение в том виде, в котором его понимает интерпретатор, т.е. в терминах объектов языка лисп - S-expression(символьное выражение-список). Также на этом этапе проводится интерпретация спецсимволов. В текущей реализации это правило касается только лексемы со значением '''. Т.е. она и следующая за ней лексема x будет приведена к виду (quote x).
    Парсер реализован в виде пакета clispi/parser и содержит структуры Parser и ParserError. Первый управляет работой лексера и исполняет функции парсера, выделяя из лексем, полученных от лексера, очередную форму верхнего уровня(метод Parse() interface{}). Структура ParserError реализует стандартный интерфейс ошибок. Объекты данной структуры используется для идентификации происхождения ошибки. Результатом работы парсера является программа в том смысле, в котором она введена при описании синтаксиса - последовательность форм. 
    Каждая форма подается на вход интерпретатору, а результат его работы записывается в поток вывода(либо в файл, либо в консоль).
    Интерпретатор реализован в виде пакета clispi/interpreter. В нем содержатся методы, управляющие всей процедурой интерпретации, начиная с чтения входного потока и заканчивая этапом непосредственно интерпретации. Пакет содержит набор структур, отражающих объекты Лиспа, - символы, символьные пары, функциональные замыкания и слои контекста, а также реализацию набора базовых функций языка и функции работы с числами.
    Были реализованы следующие функции: eq, atom, cond, cons, car, cdr, set, quote, lambda, eval, defun, setq, list, len, nth, add, sub, mul, div, mod, pow, clone. Эти функции были реализованы таким образом, чтобы можно было использовать их в коде самих базовых функций и добавить их в качестве Лисп объектов. Этими объектами являются функции с определенной сигнатурой.
    Изначально планировалось, что все атомы будут являться объектами определенной структуры, но в затем было решено оперировать объектами, реализующими пустой интерфейс interface{}, и динамически устанавливать их тип. Также было решено отказаться от структуры символа с набором свойств, которая упомянута выше при описании синтаксиса Лиспа. Результатом стало объединение пространств имен свойств-значений и свойств-функций. 
    В Лиспе существует довольно четкая грань между обычным значением и значением-функцией. Например, нельзя просто вызвать функцию lambda без последующего ее исполнения. Для блокировки исполнения лямбды, используется специальный способ в виде цепочки (function(quote (lambda ...))), что с использованием спецсимволов выглядит как #'(lambda ...) - в данном случае функция function возвращает свойство-функцию аргумента. По какой причине сделано именно так, неизвестно. Данная реализация интерпретатора позволяет пользоваться объектами-функциями и объектами-замыканиями, как обычными значениями. Т.е. вызов функции lambda попросту вернет объект-замыкание, который является абсолютно корректным результатом работы. Тип объекта важен лишь на этапе вычисления функции eval - для определенного типа реализована собственная логика поведения. Но суть все-равно остается изначальной - при применении функции eval к списку, первым элементом списка должен быть объект функционального(исполняемого) типа - либо встроенная функция, либо замыкание. Для представления замыкания используется структура Closure, содержащая указатели на списки, содержащие параметры функции и ее тело, а также на локальный контекст, в котором это замыкание было объявлено:
        type Closure struct {
            vars interface{}
            body interface{}
            env *Context
        }
    Отказ от свойств сделал ненужным хранение значения символа в какой-либо структуре - символ является просто ссылкой на значение, если значение ссылочного типа, или иначе самим значением.
    Для того, чтобы разделять строковые константы от символьных имен, которые в памяти представляются одним и тем же типом string, было принято решение символьное имя поместить в специальную структуру, имеющую единственное значение - строку. Можно было сделать наоборот, помещая в структуру строковые константы, тем более в данном проекте не было реализовано ни одной функции для работы с ними, но все сложилось как сложилось.
    Объекты контекста реализованы так, как это описано выше - роль ассоциативного списка играет объект типа map[string] interface{}. Сам объект контекста при вычислении - ссылка на структуру, представляющую голову ориентированного графа, а сама структура содержит ассоциативный список и указатель на символьную пару - хвост графа.
    Функции car и cdr реализованы таким образом, что им не известно о внутренней реализации связных списков - они оперируют объектами, реализующими определенный интерфейс Cons. 
    Интерфейс Cons содержит следующией методы:        
        type Cons interface {
            Car() interface{}
            Cdr() interface{}
            
            SetCar(interface{})
            
            Nth(int) interface{}
            Len() int
        }
    Это позволило реализовать списки одновременно на символьных парах и на структуре VList

    Структура VList
    
    С момента создания функционального программирования Дж. Маккарти, выведенного из лямбда-исчисление Черча, связанные списки стали основной структурой данных. Сегодня это неявное предположение остается и проявляется в рекурсивном определение типа в конструкции многих современных функциональных языков. Хотя связный список оказался универсальной структурой, у него есть ограничения, которые вынуждают также использовать и дополнительные структуры, такие как строки или массивы. Подобные структуры используют преимущества хранения списков единым блоком - эффективность по потребляемой памяти, быстрый произвольный доступ к элементам списка, но они требуют наличие дополнительных специальных операторов и приводят к потере единообразия. Кроме того, операции, которые обход списка в обратном направлении, такие как foldr или merge, должны выполняться с помощью рекурсии. Это часто приводит к ошибке переполнения стека на больших списках, когда оптимизаторы не в состоянии выявить и устранить хвостовую рекурсию.
    Структура VList призвана сочетать в себе расширяемость связного списка и скорость случайного доступа обычных массивов. Далее будет показано, что данная структура способна обеспечивать случайный доступ за O(1), имея при этом малое, почти константное, потребление лишней памяти.
    Структура VList основана на создании связного списка блоков памяти, размер каждого блока растет в геометрической прогрессии с показателем r. Список представляется ссылкой на начало последнего добавленного к списку блока и значение смещения от начала блока до последнего добавленного в список элемента. Начало каждого блока содержит дескриптор - ссылку вида база:смещение на предыдущий меньший блок данных, размер текущего блока и смещение до последнего добавленного в этот блок элемента. Использование списка можно свести к трем операциям - car, cdr, cons:
    - чтобы получить указатель на хвост списка, необходимо декрементировать значение смещения указателя на список. В случае, если он становится равным нулю, то перейти по ссылке(база:смещение), содержащейся в дескрипторе блока, на предыдущий блок.
    - доступ к голове осуществляется просто по базе:смещению указателя на список.
    - конструктор cons реализуется следующим образом. Для начала сравнивается ссылка на голову списка с последним добавленным в этот блок элементом(сравниваются смещения). В случае их равентства и наличия в блоке свободного места, элемент добавляется следом за последним добавленным в блок элементом, а смещения в указателе и дескрипторе инкрементируются. Если же они не равны или в блоке больше нет места, необходимо создать новый блок. В первом случае размер созданного блока будет в r раз больше заполненного, а во втором - равным 1. Затем в него добавляется сам элемент и обновляются ссылки - ссылке в дескрипторе созданного блока  присвивают указатель на текущий список, а указателю в свою очередь - ссылку на только что добавленный элемент в новом блоке.
    Таким образом данная структура не сильно должна проигрывать обычному связному списку. Более того, за счет близости данных операции cdr и cons должны выполняться быстрее. Операции car же по сути идентичны по стоимости. 
    Еще заметнее прирост в скорости на таких операциях, как len и nth - вычисление длины списка и доступ к n-му элементу, которые вычисляются в случае связных списков за линейное время. В случае VList, для подсчета длины указатель перемещается по ссылкам в дескрипторах блока и подсчитывает кол-во элементов, принадлежащих именно этому списку, т.е. длина списка будет равна сумме смещений в дескрипторах блоков плюс смещение в самом указателе. Время подсчета определяется количеством блоков, которое пропорционально логарифму от длины списка.
    Таким же образом получается и доступ к n-му элементу. Но еще стоит учесть тот факт, что вероятность нахождения n-го элемента в самом большом блоке выше, чем в предыдущем, и так далее. Также чем больше блок, тем меньше путь до него. Таким образом время доступа становится пропорционально сумме геометрической прогрессии с показателем r, которая равна 1/(1 - r), т.е. константе.
    Для реализации VList было создано две структуры, одна - структура вида { base : offset }, которая используется в качестве ссылок, и вторая - вида {{ base : offset }, size, last_used, data }.
    

1. Paul Graham. On Lisp. - 1993, 432стр. - Электрон. текстовые дан, режим доступа: свободный. - ISBN 0130305529. - Яз. англ.
2. Э.Хювёнен, И.Сеппянен Мир ЛИСПа. Т.1: Введение в язык ЛИСП и функциональное программирование. Т.2: Методы и системы программирования, 1990г. - Электрон. текстовые дан. - Режим доступа: http://lisp.ru/datas/books/Lisp1.pdf, http://lisp.ru/datas/books/Lisp2.pdf, не свободный.
3. Лидия Городняя. Введение в программирование на языке Лисп. Учебное пособие для начинающих, 2005г. - Электрон. текстовые дан. - Режим доступа: http://lisp.ru/datas/books/lisp_intro.pdf, свободный
7. Peter Norvig. (An ((Even Better) Lisp) Interpreter (in Python)). - Электрон. текстовые дан. - http://norvig.com/lispy2.html, свободный. - Яз. англ.
4. The Go Programming Language Specification. - Электрон. текстовые дан. - Режим доступа: http://golang.org/ref/spec, свободный. - Яз. англ.
5. Go 1 Release Notes. - Электрон. текстовые дан. - Режим доступа: http://golang.org/doc/go1.html, свободный. - Яз. англ.
6. Effective Go. - Электрон. текстовые дан. - Режим доступа: http://golang.org/doc/effective_go.html, свободный. - Яз. англ.
8. http://stackoverflow.com. - Электрон. текст. дан.
7. http://groups.google.com/group/golang-nuts. - Электрон. текст. дан
9. Phil Bagwell. Fast Functional Lists, Hash-Lists, Deques and Variable Length Arrays. - Электрон. текст. дан. - Режим доступа: http://infoscience.epfl.ch/record/64410/files/techlists.pdf
10. http://ru.wikipedia.org/wiki/Лисп
11. LISP. Атом первый. http://habrahabr.ru/post/65791/

6. Электрон. текстовые дан. - Режим доступа: http://golang.org/ref/spec, свободный
Datatypes In SQLite Version 3 [Электронный ресурс]. — Электрон. текстовые дан. — Режим доступа: http://www.sqlite.org/datatype3.html, свободный. — Яз. англ.
3. Limits In SQLite [Электронный ресурс]. — Электрон. текстовые дан. — Режим доступа: www.sqlite.org/limits.html, свободный. — Яз. англ
